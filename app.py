import os
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from datetime import datetime, timezone 

# For Google Sheets & Docs APIs
from google.oauth2 import service_account
from googleapiclient.discovery import build

# For Notion API
from notion_client import Client as NotionClient 

# For Google Generative AI (Gemini)
import google.generativeai as genai


# Loading environment variables from .env file
load_dotenv()
# Google Service Account Credentials
GOOGLE_SERVICE_ACCOUNT_KEY_PATH = os.getenv("GOOGLE_SERVICE_ACCOUNT_KEY_PATH")
if not GOOGLE_SERVICE_ACCOUNT_KEY_PATH:
    raise ValueError("GOOGLE_SERVICE_ACCOUNT_KEY_PATH not found in .env")

try:
    # Loading credentials from the service account key file
    google_creds = service_account.Credentials.from_service_account_file(
        GOOGLE_SERVICE_ACCOUNT_KEY_PATH,
        scopes=[
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/documents',
            'https://www.googleapis.com/auth/drive.file' 
        ]
    )
    # Build Google Sheets API client
    sheets_service = build('sheets', 'v4', credentials=google_creds)
    # Build Google Docs API client
    docs_service = build('docs', 'v1', credentials=google_creds)
    
    drive_service = build('drive', 'v3', credentials=google_creds)
    print("Google Sheets, Docs, and Drive API clients initialized.") 
except Exception as e:
    print(f"Error initializing Google API clients: {e}")
    sheets_service = None
    docs_service = None
    drive_service = None 

# Notion API Client
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
NOTION_DATABASE_ID = os.getenv("NOTION_DATABASE_ID")
GOOGLE_DRIVE_FOLDER_ID = os.getenv("GOOGLE_DRIVE_FOLDER_ID")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
if not NOTION_API_KEY:
    print("NOTION_API_KEY not found. Notion client will not be initialized.")
    notion_client = None
else:
    notion_client = NotionClient(auth=NOTION_API_KEY)
    print("Notion API client initialized.")

# Gemini API Configuration
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("GEMINI_API_KEY not found. Gemini model will not be initialized.")
    model = None
else:
    genai.configure(
    api_key=GEMINI_API_KEY,
    transport="rest", # Explicitly use REST transport
    client_options={"api_endpoint": "generativelanguage.googleapis.com"} # Explicitly set endpoint
)
    try:
        model =genai.GenerativeModel('gemini-2.5-flash-lite-preview-06-17')
        print("Gemini model initialized.")
    except Exception as e:
        print(f"Error initializing Gemini model: {e}")
        model = None
















app = Flask(__name__)


@app.route('/webhook/google-sheets', methods=['POST'])
def handle_google_sheets_webhook():
    if request.method == 'POST':
        data = request.json
        print("Received webhook from Google Sheets:", data)

        try:
            row_data = data.get('row_data', {})
            topic = row_data.get('Topic')
            keywords = row_data.get('Keywords')
            google_sheet_row_index = data.get('row_index')

            if not topic:
                return jsonify({"status": "error", "message": "Topic not found in webhook data"}), 400

            print(f"Processing new idea: Topic='{topic}', Keywords='{keywords}', RowIndex={google_sheet_row_index}")

            if not model:
                return jsonify({"status": "error", "message": "Gemini model not initialized"}), 500

            prompt = f"Generate a detailed, engaging blog post draft for the topic: '{topic}'. Incorporate these keywords naturally: {keywords}. Aim for a comprehensive and structured output, suitable for direct publication."
            print(f"Sending prompt to Gemini: {prompt[:100]}...")

            generation_config = {
                "temperature": 0.7,
                "top_p": 0.9,
                "top_k": 40,
                "max_output_tokens": 2048,
            }
            safety_settings = [
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            ]
            
            response = model.generate_content(
                prompt,
                generation_config=generation_config,
                safety_settings=safety_settings
            )

            generated_content = response.text
            print("Content generated by Gemini (first 200 chars):", generated_content[:200])

            # --- Google Docs Integration ---
            google_doc_link = "" # Initialize as empty string
            if docs_service:
                try:
                    # 1. Create a new Google Doc
                    doc_title = f"{topic} - AI Draft"
                    new_doc = docs_service.documents().create(body={'title': doc_title}).execute()
                    document_id = new_doc.get('documentId')
                    google_doc_link = f"https://docs.google.com/document/d/{document_id}/edit"
                    print(f"Google Doc created: {google_doc_link}")

                    # TARGET_GOOGLE_DRIVE_FOLDER_ID is now expected to be defined at the top of the file
                    if drive_service and GOOGLE_DRIVE_FOLDER_ID:
                        try:
                            # Retrieve the existing parents to remove them 
                            file_metadata = drive_service.files().get(fileId=document_id, fields='parents').execute()
                            previous_parents = ",".join(file_metadata.get('parents', []))
                            
                            # Move the file to the target folder
                            drive_service.files().update(
                                fileId=document_id,
                                addParents=GOOGLE_DRIVE_FOLDER_ID,
                                removeParents=previous_parents,
                                fields='id, parents' 
                            ).execute()
                            print(f"Google Doc moved to folder: {GOOGLE_DRIVE_FOLDER_ID}")
                        except Exception as e:
                            print(f"Error moving Google Doc to folder: {e}")
                    else:
                        print("Google Drive API client or folder ID not available. Cannot move doc.")
                    
                    # 2. Insert generated content into the new Google Doc
                    requests_body = [
                        {
                            'insertText': {
                                'location': {
                                    'index': 1, # Inserts at the beginning of the document
                                },
                                'text': generated_content
                            }
                        }
                    ]
                    docs_service.documents().batchUpdate(documentId=document_id, body={'requests': requests_body}).execute()
                    print("Content inserted into Google Doc.")

                except Exception as e:
                    print(f"Error creating or updating Google Doc: {e}")
                    google_doc_link = "Error creating doc" # Update link in case of failure
            else:
                print("Google Docs API client not initialized. Cannot create doc.")
                google_doc_link = "Docs API not available"

            # --- Notion Integration ---
            notion_page_id = "" # Initialize as empty string
            if notion_client and NOTION_DATABASE_ID:
                try:
                    # 1. Create a new page  in Notion database
                    new_notion_page = notion_client.pages.create(
                        parent={"database_id": NOTION_DATABASE_ID},
                        properties={
                            "Topic": { # Matches my  Notion 'Topic' property 
                                "title": [{"text": {"content": topic}}]
                            },
                            "Google Doc Link": { # Matches my Notion 'Google Doc Link' property 
                                "url": google_doc_link
                            },
                            "LLM Status": { # Matches my Notion 'LLM Status' property 
                                "select": {"name": "Draft Generated"}
                            },
                            "Created At": { # Matches my Notion 'Created At' property 
                                "date": {"start": datetime.now(timezone.utc).isoformat()} # Use current UTC time
                            },
                            "Notion Page ID": { # Matches my Notion 'Notion Page ID' property (Text type)
                                "rich_text": [{"text": {"content": ""}}] # Will update later with actual ID
                            }
                        }
                    )
                    notion_page_id = new_notion_page["id"]
                    print(f"Notion page created: {notion_page_id}")

                    # 2. Update the Notion page with its own ID 
                    notion_client.pages.update(
                        page_id=notion_page_id,
                        properties={
                            "Notion Page ID": {
                                "rich_text": [{"text": {"content": notion_page_id}}]
                            }
                        }
                    )
                    print(f"Notion page '{notion_page_id}' updated with its own ID.")

                except Exception as e:
                    print(f"Error creating or updating Notion page: {e}")
                    notion_page_id = "Error creating page"
            else:
                print("Notion API client or Database ID not initialized. Cannot create Notion page.")
                notion_page_id = "Notion API not available"

            # --- Update Google Sheet with Links and Status ---
            if sheets_service:
                try:
                    # SPREADSHEET_ID is expected to be defined at the top of the file
                    if not GOOGLE_SHEET_ID:
                        print("GOOGLE_SHEET_ID not found in .env. Cannot update sheet.")
                    else:
                        
                        range_to_update = f"Sheet1!C{google_sheet_row_index}:E{google_sheet_row_index}"
                        
                        values = [[google_doc_link, notion_page_id, "Completed"]] 

                        body = {
                            'values': values
                        }
                        
                        sheets_service.spreadsheets().values().update(
                            spreadsheetId=GOOGLE_SHEET_ID, # Use the global variable
                            range=range_to_update,
                            valueInputOption='RAW',
                            body=body
                        ).execute()
                        print("Google Sheet updated successfully with links and status.")
                except Exception as e:
                    print(f"Error updating Google Sheet: {e}")
            else:
                print("Google Sheets API client not initialized. Cannot update sheet.")

            # ---  Webhook Response ---
            return jsonify({
                "status": "success",
                "message": "Content generation workflow completed",
                "topic": topic,
                "google_doc_link": google_doc_link,
                "notion_page_id": notion_page_id,
                "generated_content_preview": generated_content[:500] + "..."
            }), 200
            
        except Exception as e:
            print(f"Error processing webhook or calling external APIs: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500
    else:
        return jsonify({"status": "error", "message": "Method not allowed"}), 405
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True, host='0.0.0.0', port=port)